import subprocess
import os
import time
import pyautogui
import google.generativeai as genai
from dotenv import load_dotenv
load_dotenv()

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
model = genai.GenerativeModel("gemini-1.5-flash")


AUTOCAD_PATH = r"C:/Program Files/Autodesk/AutoCAD 2025/acad.exe"

# === FUNCTIONS ===
import ast

def parse_string_to_list(input_str):
    """
    Parses a string representation of a list and returns the actual list.

    Args:
        input_str (str): The input string containing a formatted list.

    Returns:
        list: The extracted list.
    """
    try:
        input_str = input_str.strip("`\n")
        
        parsed_list = ast.literal_eval(input_str)
        
        return parsed_list
    except (SyntaxError, ValueError):
        return []

def get_response_from_gemini(model: genai.GenerativeModel, prompt: str) -> str:
    """
    This function takes a prompt as input and returns AutoCAD commands
    generated by the Gemini model using the genai library.
    
    Args:
        model (genai.GenerativeModel): An instance of the generative model.
        prompt (str): The input prompt for the model.
    
    Returns:
        str: The generated text containing AutoCAD commands.
    """
    prompt = "Give AutoCAD commands to create "+prompt+""" Make sure to give only commands and nothing else. format the comments in form of a list \
        for eg: if you have to draw a line starting at (0,0) and ending at (1,1) your output should be: ['line', '0,0', '5,5']"""
    response = model.generate_content(prompt)
    result = parse_string_to_list(response.text)
    breakpoint()
    return result

def open_autocad():
    """
    Launches AutoCAD and waits until it is fully loaded.
    """
    print("Opening AutoCAD...")
    subprocess.Popen([AUTOCAD_PATH])
    time.sleep(20)
    print("AutoCAD should now be open.")

def type_comment_in_autocad(comments):
    """
    Opens a new CAD file by clicking the 'New' button (using an image search)
    and then uses pyautogui to simulate typing the provided comment.
    
    Note:
        - Ensure that AutoCAD is open and the "New" button is visible.
        - Save a screenshot of the "New" button as 'new_button.png' in your working directory.
        - Adjust the confidence and sleep times as needed.
    """

    new_button_image = 'D:/MyData/personal projects/AI Agents/Agents-AI/agents/media/new_button.png' 
    print("Searching for the 'New' button on screen...")

    button_location = None
    for _ in range(10):
        button_location = pyautogui.locateOnScreen(new_button_image)
        if button_location is not None:
            break
        time.sleep(1)
    
    if button_location is None:
        print("Error: 'New' button not found. Please ensure the image is correct and visible on the screen.")
        return
    
    print(f"'New' button located at: {button_location}. Clicking it...")
    pyautogui.click(button_location)
    

    time.sleep(0.1)
    
    print("Typing comment in AutoCAD...")
    for comment in comments:
        pyautogui.write(comment, interval=0.1)
        pyautogui.press('enter')

def main():

    user_command = input("Enter your command for the AI agent: ")


    comment_to_type = get_response_from_gemini(model, user_command)
    if not comment_to_type:
        print("Failed to retrieve a response from Gemini. Exiting.")
        return

    print("Gemini response:", comment_to_type)

    open_autocad()

    type_comment_in_autocad(comment_to_type)
    print("Operation complete.")

if __name__ == '__main__':
    main()
